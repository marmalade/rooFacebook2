/*
 * Internal header for the rooFacebook2 extension.
 *
 * This file should be used for any common function definitions etc that need to
 * be shared between the platform-dependent and platform-indepdendent parts of
 * this extension.
 */

/*
 * NOTE: This file was originally written by the extension builder, but will not
 * be overwritten (unless --force is specified) and is intended to be modified.
 */


#ifndef ROOFACEBOOK2_INTERNAL_H
#define ROOFACEBOOK2_INTERNAL_H

#include "s3eTypes.h"
#include "rooFacebook2.h"
#include "rooFacebook2_autodefs.h"


/**
 * Initialise the extension.  This is called once then the extension is first
 * accessed by s3eregister.  If this function returns S3E_RESULT_ERROR the
 * extension will be reported as not-existing on the device.
 */
s3eResult rooFacebook2Init();

/**
 * Platform-specific initialisation, implemented on each platform
 */
s3eResult rooFacebook2Init_platform();

/**
 * Terminate the extension.  This is called once on shutdown, but only if the
 * extension was loader and Init() was successful.
 */
void rooFacebook2Terminate();

/**
 * Platform-specific termination, implemented on each platform
 */
void rooFacebook2Terminate_platform();
rooFacebook_Session * rooFacebook_init_platform(const char* appId, rooFacebook_CallbackSpecific callback, void * userData);

rooFacebook_Session * rooFacebook_initWithUrlSchemeSuffix_platform(const char* appId, const char * urlSchemeSuffix, rooFacebook_CallbackSpecific callback, void * userData);

void rooFacebook_authorize_platform(rooFacebook_Session * facebook, const char * permissions);

void rooFacebook_extendAccessTokenIfNeeded_platform(rooFacebook_Session * facebook);

void rooFacebook_logout_platform(rooFacebook_Session * facebook);

void rooFacebook_deleteSession_platform(rooFacebook_Session * facebook);

int rooFacebook_isSessionValid_platform(rooFacebook_Session * facebook);

rooFacebook_Dialog * rooFacebook_dialog_platform(rooFacebook_Session * facebook, const char * action, rooFacebook_CallbackSpecific callback, void * userData);

rooFacebook_Dialog * rooFacebook_dialogAndParams_platform(rooFacebook_Session * facebook, const char * action, const char * params, rooFacebook_CallbackSpecific callback, void * userData);

void rooFacebook_deleteDialog_platform(rooFacebook_Dialog * dialog);

rooFacebook_Request * rooFacebook_requestWithParams_platform(rooFacebook_Session * facebook, const char * params, rooFacebook_CallbackSpecific callback, void * userData);

rooFacebook_Request * rooFacebook_requestWithMethodName_platform(rooFacebook_Session * facebook, const char * methodName, const char * params, const char * httpMethod, rooFacebook_CallbackSpecific callback, void * userData);

rooFacebook_Request * rooFacebook_requestWithGraphPath_platform(rooFacebook_Session * facebook, const char * graphPath, rooFacebook_CallbackSpecific callback, void * userData);

rooFacebook_Request * rooFacebook_requestWithGraphPathAndParams_platform(rooFacebook_Session * facebook, const char * graphPath, const char * params, rooFacebook_CallbackSpecific callback, void * userData);

rooFacebook_Request * rooFacebook_requestWithGraphPathAndParamsAndHttpMethod_platform(rooFacebook_Session * facebook, const char * graphPath, const char * params, const char * httpMethod, rooFacebook_CallbackSpecific callback, void * userData);

void rooFacebook_deleteRequest_platform(rooFacebook_Request * request);


#endif /* !ROOFACEBOOK2_INTERNAL_H */